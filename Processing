  //Defining Variables
  float x1, y1, d1, vx1, vy1, rot1, rotspd1;
  float x2, y2, d2, vx2, vy2, rot2, rotspd2;
  float x3, y3, d3, vx3, vy3, rot3, rotspd3;
  float temp;
  float dd1 = random(8)/100, dd2 = random(8)/100, dd3 = random(8)/100;
  float d1Min = 5,  d1Max = 15;
  float d2Min = 5,  d2Max = 15; 
  float d3Min = 5,  d3Max = 15; 
  
void setup(){
  size(1280,720);
  
  //Initial Parameters
  x1 = random(width-200)+100; y1 = random(height-200)+100; d1 = random(10)+5; vx1 = random(5)+2; vy1 = random(5)+2; rotspd1 = random(10);
  x2 = random(width-200)+100; y2 = random(height-200)+100; d2 = random(10)+5; vx2 = random(5)+2; vy2 = random(5)+2; rotspd2 = random(10);
  x3 = random(width-200)+100; y3 = random(height-200)+100; d3 = random(10)+5; vx3 = random(5)+2; vy3 = random(5)+2; rotspd3 = random(10);
}

void draw(){
  background(0);
  x1 += vx1; y1 += vy1;
  x2 += vx2; y2 += vy2;
  x3 += vx3; y3 += vy3;
  
  //Drawing Shapes 
  pushMatrix();
  translate(x1,y1);
  rotate(rot1);
  hornet(0,0,d1);
  popMatrix();
  rot1 += 0.01*rotspd1;
    
  
  pushMatrix();
  translate(x2,y2);
  rotate(rot2);
  AAA(0,0,d2);
  popMatrix();
  rot2 += 0.01*rotspd2;

  pushMatrix();
  translate(x3,y3);
  rotate(rot3);
  pang(0,0,d3);
  popMatrix();
  rot3 += 0.01*rotspd3;
  


  //Object Collision
  float r1 = 10*d1;
  float r2 = 8*d2;
  float r3 = 5*d3;
  float dx, dy, sum;
  float sx, sy;
  
  dx = x2 - x1;
  dy = y2 - y1;
  sum = r1 + r2;
  if (dx*dx + dy*dy < sum*sum) {
    temp = vx1; vx1 = vx2; vx2 = temp;
    temp = vy1; vy1 = vy2; vy2 = temp;
    temp = rotspd1; rotspd1 = rotspd2; rotspd2 = temp;
    while (dx*dx + dy*dy < sum*sum) {
      if (dx >= 0) sx = 5; 
      else sx = -5;
      if (dy >= 0) sy = 5; 
      else sy = -5;
      x1 -= sx; 
      y1 -= sy;
      x2 += sx; 
      y2 += sy;
      dx = x2 - x1; 
      dy = y2 - y1;
    }
  }
  dx = x3 - x1;
  dy = y3 - y1;
  sum = r1 + r3;
  if (dx*dx + dy*dy < sum*sum) {
    temp = vx1; vx1 = vx3; vx3 = temp;
    temp = vy1; vy1 = vy3; vy3 = temp;
    temp = rotspd1; rotspd1 = rotspd3; rotspd3 = temp;
    while (dx*dx + dy*dy < sum*sum) {
      if (dx >= 0) sx = 5; 
      else sx = -5;
      if (dy >= 0) sy = 5; 
      else sy = -5;
      x1 -= sx; 
      y1 -= sy;
      x3 += sx; 
      y3 += sy;
      dx = x3 - x1; 
      dy = y3 - y1;
    }
  }
  dx = x3 - x2;
  dy = y3 - y2;
  sum = r2 + r3;
  if (dx*dx + dy*dy < sum*sum) {
    temp = vx2; vx2 = vx3; vx3 = temp;
    temp = vy2; vy2 = vy3; vy3 = temp;
    temp = rotspd2; rotspd2 = rotspd3; rotspd3 = temp;
    while (dx*dx + dy*dy < sum*sum) {
      if (dx >= 0) sx = 5; 
      else sx = -5;
      if (dy >= 0) sy = 5; 
      else sy = -5;
      x2 -= sx; 
      y2 -= sy;
      x3 += sx; 
      y3 += sy;
      dx = x3 - x2; 
      dy = y3 - y2;
    }
  }
  
  //Size Change
  d1 += dd1; 
  if (d1 > d1Max) { 
    d1 = d1Max; 
    dd1 = -abs(dd1); 
  } 
  else if (d1 < d1Min) { 
    d1 = d1Min; 
    dd1 =  abs(dd1); }
    d2 += dd2; 
  if (d2 > d2Max) { 
    d2 = d2Max; 
    dd2 = -abs(dd2); 
  } 
  else if (d2 < d2Min) { 
    d2 = d2Min; 
    dd2 =  abs(dd2); 
  }
  d3 += dd3; 
  if (d3 > d3Max) { 
    d3 = d3Max; 
    dd3 = -abs(dd3); 
  } 
  else if (d3 < d3Min) { 
    d3 = d3Min; 
    dd3 =  abs(dd3); 
  }
  
  //Wall Collision 
  if (x1 < r1) { 
    x1 = r1; 
    vx1 = -vx1; 
    rotspd1 = -rotspd1; 
  }
  else if (x1 > width - r1) {
    x1 = width - r1; 
    vx1 = -vx1; 
    rotspd1 = -rotspd1; 
  }
  if (y1 < r1) { 
    y1 = r1; 
    vy1 = -vy1; 
    rotspd1 = -rotspd1; 
  }
  else if (y1 > height - r1) { 
    y1 = height - r1; 
    vy1 = -vy1; 
    rotspd1 = -rotspd1; 
  }

  if (x2 < r2) { 
    x2 = r2; 
    vx2 = -vx2; 
    rotspd2 = -rotspd2; 
  }
  else if (x2 > width - r2) { 
    x2 = width - r2; vx2 = -vx2; 
    rotspd2 = -rotspd2; 
    }
  if (y2 < r2) { 
    y2 = r2; 
    vy2 = -vy2; 
    rotspd2 = -rotspd2; 
  }
  else if (y2 > height - r2) { 
    y2 = height - r2; 
    vy2 = -vy2; 
    rotspd2 = -rotspd2; 
  }


  if (x3 < r3) { 
    x3 = r3; 
    vx3 = -vx3; 
    rotspd3 = -rotspd3; 
  }
  else if (x3 > width - r3) { 
    x3 = width - r3; 
    vx3 = -vx3; 
    rotspd3 = -rotspd3; }
  if (y3 < r3) { 
    y3 = r3; 
    vy3 = -vy3; 
    rotspd3 = -rotspd3; 
  }
  else if (y3 > height - r3) { 
    y3 = height - r3; 
    vy3 = -vy3; 
    rotspd3 = -rotspd3; 
  }
}

void hornet(float x, float y, float d){
  noStroke();
  ellipse(x, y, 10*d, 25*d); //Head
  fill(0);
  ellipse(x, y-7.5*d, 6*d, 20*d);
  
  pushMatrix();
  fill(0);
  translate(x-2*d, y+8.5*d);
  rotate(-PI/5);
  ellipse(0, 0, 2*d, 3*d); //Left Eye
  popMatrix();
 
  pushMatrix();
  fill(0);
  translate(x+2*d, y+8.5*d);
  rotate(PI/5);
  ellipse(0, 0, 2*d, 3*d); //Right Eye
  popMatrix();
}


void AAA(float k, float m, float c){
    strokeWeight(0);
  // left arm
  fill(100,130,250);
  pushMatrix();
  translate(k-6*c, m+2*c);
  rotate(radians(150));
  ellipse(0,0,5*c,2*c);
  popMatrix();

  // head, body
  fill(150,200,240);
  arc(k, m-5*c, 12*c, 10*c, PI, 2*PI); // head
  rect(k-6*c, m-6*c, 12*c, 10*c);      // body

  // eyes
  fill(0,0,0);
  ellipse(k-2*c, m-3*c, 1.5*c, 2*c); // left eye
  ellipse(k+2*c, m-3*c, 1.5*c, 2*c); // right eye

  // mouth
  fill(100,130,250);
  arc(k, m-c, 5*c, 4*c, 0, PI);

  // legs
  arc(k-2.5*c, m+4*c, 3*c, 4*c, 0, PI); // left leg
  arc(k+2.5*c, m+4*c, 3*c, 4*c, 0, PI); // right leg

  // right arm
  pushMatrix();
  translate(k+7*c, m);
  rotate(radians(150));
  ellipse(0,0, 5*c, 2*c);
  popMatrix();
}

void pang(float x, float y, float d) {
  fill(128,175,246);
  circle(x,y,10*d);  // 머리
  y = y + d;
  fill(242,222,121);
  arc(x,y,2.6*d,4*d,0,PI);  // 부리1
  arc(x,y,2.6*d,2*d,PI,2*PI);  // 부리2
  line(x-1.3*d,y,x+1.3*d,y);  // 입1
  noFill();
  arc(x,y,2.5*d,3.3*d,0,PI);  // 입2
  arc(x,y+2.3*d,3*d,3.8*d,5*PI/4,7*PI/4);
  x = x - 3.3*d;
  noFill();
  arc(x,y,4*d,5.5*d,1.2*PI,2*PI);  // 왼
  x = x + 6.6*d;
  noFill();
  arc(x,y,4*d,5.5*d,PI,1.8*PI);  // 오
  x = x - 3.3*d;
  line(x,y-2*d,x-0.8*d,y-1.3*d);
  line(x,y-2*d,x+0.8*d,y-1.3*d);
  line(x-0.8*d,y-1.3*d,x-1.7*d,y-1.8*d);
  line(x+0.8*d,y-1.3*d,x+1.7*d,y-1.8*d);  // 라인
  fill(0,0,0);
  ellipse(x-3*d,y-0.5*d,1.5*d,2.5*d);
  ellipse(x+3*d,y-0.5*d,1.5*d,2.5*d);  // 눈
  fill(255,255,255);
  circle(x-3*d,y-d,0.9*d);
  circle(x+3*d,y-d,0.9*d);
}
